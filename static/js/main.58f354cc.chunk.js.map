{"version":3,"sources":["img/biman.png","calPart.js","bmiResult.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","calPart","state","height","weight","handleChangeHeight","e","_this","setState","target","value","handleChangeWeight","handleSubmit","preventDefault","props","onCreate","react_default","a","createElement","Form","onSubmit","this","FormGroup","Label","for","Input","onChange","placeholder","Button","type","Component","bmiResult","judgeFunc","BMI","style","fontSize","textAlign","App","bmi","handleCreate","data","toFixed","Container","Row","Col","className","md","size","offset","src_calPart","sm","maxWidth","maxHeight","src","bimanImg","src_bmiResult","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58f354cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biman.31c375dd.png\";","import React, { Component } from 'react';\r\nimport { Container, Row, Col , Form, FormGroup, Label, Input, FormText, Button } from 'reactstrap';\r\n\r\nclass calPart extends Component {\r\n    \r\n    state = {\r\n        height: '',\r\n        weight: '',\r\n    };\r\n    handleChangeHeight = (e) => {\r\n        this.setState({\r\n            height : e.target.value\r\n        })    \r\n    }\r\n    handleChangeWeight = (e) => {\r\n        this.setState({\r\n            weight : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onCreate(this.state);\r\n        this.setState({\r\n            height:'',\r\n            weight:'',\r\n        })\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n            <Form onSubmit={this.handleSubmit}>\r\n            <FormGroup>\r\n              <Label for=\"myHeight\">키</Label>\r\n              <Input value={this.state.height} onChange={this.handleChangeHeight} placeholder=\"cm\"/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"myWeight\">몸무게</Label>\r\n              <Input value={this.state.weight} onChange={this.handleChangeWeight} placeholder=\"kg\" />\r\n            </FormGroup>\r\n            <Button type=\"submit\"> 나의 BMI 지수 확인 </Button>\r\n            </Form>\r\n            </div>\r\n        )\r\n    }\r\n} \r\n\r\n\r\nexport default calPart;\r\n","import React, { Component } from 'react';\r\nimport { VictoryBar, VictoryStack } from 'victory';\r\nclass bmiResult extends Component {\r\n\r\n    judgeFunc = () => {\r\n    if(this.props.BMI<18.5)\r\n    {\r\n        return \"저체중\"    \r\n    }\r\n    else if(this.props.BMI<23)\r\n    {\r\n        return \"정상\"\r\n    }\r\n    else if(this.props.BMI<25)\r\n    {\r\n        return \"비만 전 단계\"\r\n    }\r\n    else if(this.props.BMI<30)\r\n    {\r\n        return \"1단계 비만\"\r\n    }\r\n    else if(this.props.BMI<35)\r\n    {\r\n        return \"2단계 비만\"\r\n    }\r\n    else if(this.props.BMI>=35)\r\n    {\r\n        return \"3단계 비만\"\r\n    }\r\n    \r\n}\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n            <div style={{fontSize: \"1.5rem\", textAlign:\"center\"}}>\r\n            당신의 BMI 지수는 <b>{this.props.BMI}</b>({this.judgeFunc()}) 입니다.\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default bmiResult;","import React, { Component } from 'react';\r\nimport { Container, Row, Col , Form, FormGroup, Label, Input, FormText, Button } from 'reactstrap';\r\nimport './App.css';\r\nimport CalPart  from './calPart';\r\nimport BmiResult from './bmiResult';\r\nimport bimanImg from './img/biman.png';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    bmi : '',\r\n  }\r\n\r\n  handleCreate = (data) => {\r\n    this.setState({\r\n      bmi : (data.weight/ ((data.height / 100) * (data.height / 100))).toFixed(2)\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col className=\"header\"> BMI 계산기 (체질량 지수) </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={{size:6, offset: 3}} className=\"subHeader\">\r\n          신체질량지수는 BMI(Body Mass Index)라고 부르며, 키와 몸무게를 이용하여 비만 정도를 추정하는 계산법이다.\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={{size:4, offset: 4}} className=\"calPart\">\r\n          <CalPart onCreate={this.handleCreate} />\r\n        </Col>\r\n        </Row>\r\n\r\n      <Row>\r\n        <Col md={{size:6, offset: 3}} sm={{size:10, offset:1}} className=\"bimanImg\">\r\n          <img style={{ maxWidth:'100%', maxHeight:'100%' }} src={bimanImg}/>\r\n        </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={{size:6, offset:3}} className=\"resultPart\">\r\n          {this.state.bmi ==='' ? (<div></div>) : (<BmiResult BMI={this.state.bmi}/>)}\r\n          </Col>\r\n          </Row>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}